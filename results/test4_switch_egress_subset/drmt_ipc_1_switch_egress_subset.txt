********************************** Input DAG ***********************************
('# of nodes = ', 46)
('# of edges = ', 87)
('# of matches = ', 16)
('# of actions = ', 30)
('Match unit size = ', 80)
('# of match units = ', 16.0)
('match_unit_limit = ', 8)
('max size of match key in program = ', 43)
('max size of match key in hw = ', 640)
('# of action fields = ', 65)
('action_fields_limit = ', 32)
('max number of action fields in program = ', 8)
('max number of action fields in hw = ', 32)
('match_proc_limit =', 1)
('action_proc_limit =', 1)
('Critical path: ', ['rid_MATCH', 'rid_ACTION', 'replica_type_MATCH', 'replica_type_ACTION', 'rewrite_ACTION', 'egress_bd_map_MATCH', 'egress_bd_map_ACTION', 'smac_rewrite_MATCH', 'smac_rewrite_ACTION'])
Critical path length = 97 cycles
('Upper bound on throughput = ', 0.49230769230769234)



('Searching between limits ', 3, ' and ', 100, ' cycles')
('\nperiod =', 52, ' cycles')
******************************* Scheduling DRMT ********************************
****************************** Running rnd sieve *******************************
Looking for greedy feasible solution for 30 seconds
('Found Feasible Solution With Latency', 96)
**************************** Running PRMT + rotator ****************************
*************************** Running greedy heuristic ***************************
****************************** Running ILP solver ******************************
Academic license - for non-commercial use only
('Latencies, PRMT: ', 118, ' RND sieve: ', 96)
Picking output from RND sieve
*************************** Running DRMT ILP solver ****************************
('Optimal solution found with gap ', 0.0)
('\nperiod =', 27, ' cycles')
******************************* Scheduling DRMT ********************************
****************************** Running rnd sieve *******************************
Looking for greedy feasible solution for 30 seconds
('Found Feasible Solution With Latency', 96)
**************************** Running PRMT + rotator ****************************
*************************** Running greedy heuristic ***************************
****************************** Running ILP solver ******************************
('Latencies, PRMT: ', 118, ' RND sieve: ', 96)
Picking output from RND sieve
*************************** Running DRMT ILP solver ****************************
('Optimal solution found with gap ', 0.0)
('\nperiod =', 15, ' cycles')
******************************* Scheduling DRMT ********************************
****************************** Running rnd sieve *******************************
Looking for greedy feasible solution for 30 seconds
('Found Feasible Solution With Latency', 96)
**************************** Running PRMT + rotator ****************************
*************************** Running greedy heuristic ***************************
****************************** Running ILP solver ******************************
('Latencies, PRMT: ', 118, ' RND sieve: ', 96)
Picking output from RND sieve
*************************** Running DRMT ILP solver ****************************
('Optimal solution found with gap ', 0.0)
('\nperiod =', 9, ' cycles')
******************************* Scheduling DRMT ********************************
****************************** Running rnd sieve *******************************
Looking for greedy feasible solution for 30 seconds
('Found Feasible Solution With Latency', 124)
('Found Feasible Solution With Latency', 123)
('Found Feasible Solution With Latency', 120)
('Found Feasible Solution With Latency', 98)
('Found Feasible Solution With Latency', 96)
**************************** Running PRMT + rotator ****************************
*************************** Running greedy heuristic ***************************
****************************** Running ILP solver ******************************
('Latencies, PRMT: ', 119, ' RND sieve: ', 96)
Picking output from RND sieve
*************************** Running DRMT ILP solver ****************************
('Optimal solution found with gap ', 0.0)
('\nperiod =', 6, ' cycles')
******************************* Scheduling DRMT ********************************
****************************** Running rnd sieve *******************************
Looking for greedy feasible solution for 30 seconds
**************************** Running PRMT + rotator ****************************
*************************** Running greedy heuristic ***************************
****************************** Running ILP solver ******************************
Picking output from PRMT
('Latency for PRMT ', 122)
*************************** Running DRMT ILP solver ****************************
('Optimal solution found with gap ', 0.0)
('\nperiod =', 4, ' cycles')
******************************* Scheduling DRMT ********************************
****************************** Running rnd sieve *******************************
Looking for greedy feasible solution for 30 seconds
**************************** Running PRMT + rotator ****************************
*************************** Running greedy heuristic ***************************
****************************** Running ILP solver ******************************
Can't find a solution in rotator, match const. violated
Both heuristics returned nothing
*************************** Running DRMT ILP solver ****************************
Infeasible
('\nperiod =', 5, ' cycles')
******************************* Scheduling DRMT ********************************
****************************** Running rnd sieve *******************************
Looking for greedy feasible solution for 30 seconds
**************************** Running PRMT + rotator ****************************
*************************** Running greedy heuristic ***************************
****************************** Running ILP solver ******************************
Picking output from PRMT
('Latency for PRMT ', 118)
*************************** Running DRMT ILP solver ****************************
('Optimal solution found with gap ', 0.0)

Best achieved throughput = 1 packet every 5 cycles
Schedule length (thread count) = 99 cycles
Critical path length = 97 cycles



******************* First scheduling period on one processor********************
('|           t=0            |           t=1            |           t=2            |           t=3            |\n|     vlan_decap_MATCH     |                          |                          |                          |\n|        rid_MATCH         |                          |                          |                          |\n|     l3_rewrite_MATCH     |                          |                          |                          |\n|       mirror_MATCH       |                          |                          |                          |\n|egress_port_mapping_MATCH |                          |                          |                          |\n|     egress_nat_MATCH     |                          |                          |                          |\n\n|           t=20           |           t=21           |           t=22           |           t=23           |\n|                          |                          |      _condition_43       |                          |\n|                          |                          |      _condition_41       |                          |\n|                          |                          |      _condition_42       |                          |\n|                          |                          |      _condition_44       |                          |\n|                          |                          |      _condition_46       |                          |\n|                          |                          |    vlan_decap_ACTION     |                          |\n|                          |                          |      mirror_ACTION       |                          |\n|                          |                          |      _condition_52       |                          |\n|                          |                          |        rid_ACTION        |                          |\n\n|           t=24           |           t=25           |           t=26           |           t=27           |\n| rewrite_multicast_MATCH  |                          |                          |                          |\n|      rewrite_MATCH       |                          |                          |                          |\n|    replica_type_MATCH    |                          |                          |                          |\n\n|           t=44           |           t=45           |           t=46           |           t=47           |\n|                          |                          |   replica_type_ACTION    |                          |\n|                          |                          |      _condition_50       |                          |\n\n|           t=48           |           t=49           |           t=50           |           t=51           |\n|                          |                          |egress_port_mapping_ACTION|                          |\n|                          |                          |      _condition_45       |                          |\n|                          |                          | rewrite_multicast_ACTION |                          |\n|                          |                          |      rewrite_ACTION      |                          |\n\n|           t=52           |           t=53           |           t=54           |           t=55           |\n|        mtu_MATCH         |                          |                          |                          |\n|   egress_qos_map_MATCH   |                          |                          |                          |\n| egress_vlan_xlate_MATCH  |                          |                          |                          |\n|  egress_bd_stats_MATCH   |                          |                          |                          |\n|   egress_bd_map_MATCH    |                          |                          |                          |\n\n|           t=72           |           t=73           |           t=74           |           t=75           |\n|                          |                          |  egress_qos_map_ACTION   |                          |\n|                          |                          |      _condition_47       |                          |\n|                          |                          |      _condition_49       |                          |\n|                          |                          |        mtu_ACTION        |                          |\n|                          |                          |   egress_filter_ACTION   |                          |\n|                          |                          |   egress_bd_map_ACTION   |                          |\n\n|           t=76           |           t=77           |           t=78           |           t=79           |\n|    smac_rewrite_MATCH    |                          |                          |                          |\n| egress_system_acl_MATCH  |                          |                          |                          |\n\n|           t=96           |           t=97           |           t=98           |\n|                          |                          |    egress_nat_ACTION     |\n|                          |                          | egress_vlan_xlate_ACTION |\n|                          |                          |      _condition_48       |\n|                          |                          |egress_filter_drop_ACTION |\n|                          |                          |  egress_bd_stats_ACTION  |\n|                          |                          |    l3_rewrite_ACTION     |\n|                          |                          |   smac_rewrite_ACTION    |\n|                          |                          |      _condition_51       |\n|                          |                          | egress_system_acl_ACTION |\n\n', '\n\n')
************************* Steady state on one processor*************************
******************p[u] is packet from u scheduling periods ago******************
('|              t=0               |              t=1               |              t=2               |              t=3               |\n|     p[0].vlan_decap_MATCH      |    p[15].smac_rewrite_MATCH    |        p[10].mtu_MATCH         |    p[19].egress_nat_ACTION     |\n|p[10].egress_port_mapping_ACTION|    p[9].replica_type_ACTION    |   p[10].egress_qos_map_MATCH   | p[19].egress_vlan_xlate_ACTION |\n|      p[10]._condition_45       |       p[9]._condition_50       |       p[4]._condition_43       |      p[19]._condition_48       |\n|         p[0].rid_MATCH         | p[15].egress_system_acl_MATCH  |       p[4]._condition_41       |p[19].egress_filter_drop_ACTION |\n|     p[0].l3_rewrite_MATCH      |                                |       p[4]._condition_42       |  p[19].egress_bd_stats_ACTION  |\n| p[10].rewrite_multicast_ACTION |                                |       p[4]._condition_44       |    p[19].l3_rewrite_ACTION     |\n|       p[0].mirror_MATCH        |                                |       p[4]._condition_46       |   p[19].smac_rewrite_ACTION    |\n| p[0].egress_port_mapping_MATCH |                                |     p[4].vlan_decap_ACTION     |      p[19]._condition_51       |\n|      p[10].rewrite_ACTION      |                                | p[10].egress_vlan_xlate_MATCH  | p[19].egress_system_acl_ACTION |\n|     p[0].egress_nat_MATCH      |                                |  p[10].egress_bd_stats_MATCH   |                                |\n|                                |                                |       p[4].mirror_ACTION       |                                |\n|                                |                                |   p[10].egress_bd_map_MATCH    |                                |\n|                                |                                |       p[4]._condition_52       |                                |\n|                                |                                |        p[4].rid_ACTION         |                                |\n\n|              t=4               |\n|  p[14].egress_qos_map_ACTION   |\n|  p[4].rewrite_multicast_MATCH  |\n|      p[14]._condition_47       |\n|      p[14]._condition_49       |\n|       p[4].rewrite_MATCH       |\n|        p[14].mtu_ACTION        |\n|    p[4].replica_type_MATCH     |\n|   p[14].egress_filter_ACTION   |\n|   p[14].egress_bd_map_ACTION   |\n\n', '\n\n')
Match units usage (max = 8 units) on one processor
|t=0|t=1|t=2|t=3|t=4|
|6.0|2.0|5.0| 0 |3.0|


Action fields usage (max = 32 fields) on one processor
|t=0|t=1|t=2|t=3|t=4|
|12 | 2 |18 |23 |10 |


Match packets (max = 1 match packets) on one processor
|t=0|t=1|t=2|t=3|t=4|
| 1 | 1 | 1 | 0 | 1 |


Action packets (max = 1 action packets) on one processor
|t=0|t=1|t=2|t=3|t=4|
| 1 | 1 | 1 | 1 | 1 |


